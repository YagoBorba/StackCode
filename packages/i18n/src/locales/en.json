{
  "commit": {
    "command_description": "Starts an interactive wizard to create a conventional commit message.",
    "prompt": {
      "select_type": "Select the type of change that you're committing:",
      "scope": "What is the scope of this change (e.g. component or file name)? (optional)",
      "short_description": "Write a short, imperative tense description of the change:",
      "long_description": "Provide a longer description of the change (optional). Use '|' for newlines:",
      "breaking_changes": "Are there any BREAKING CHANGES? (optional)",
      "affected_issues": "Does this change affect any open issues? (e.g. 'closes #123') (optional)"
    },
    "types": {
      "feat": "feat:     A new feature",
      "fix": "fix:      A bug fix",
      "docs": "docs:     Documentation only changes",
      "style": "style:    Changes that do not affect the meaning of the code",
      "refactor": "refactor: A code change that neither fixes a bug nor adds a feature",
      "perf": "perf:     A code change that improves performance",
      "test": "test:     Adding missing tests or correcting existing tests",
      "chore": "chore:    Changes to the build process or auxiliary tools",
      "revert": "revert:   Reverts a previous commit"
    },
    "success": "✔ Commit created successfully!"
  },
  "validate": {
    "command_description": "Validates if a string is a conventional commit message.",
    "success": "✔ Valid: This is a valid conventional commit message.",
    "error": "✖ Invalid: This is not a valid conventional commit message."
  },
  "generate": {
    "command_description": "Generate common project files.",
    "prompt": {
      "readme_overwrite": "A README.md file already exists. Do you want to overwrite it?"
    },
    "error": {
      "gitignore_exists": "A .gitignore file already exists. Operation cancelled to avoid overwriting.",
      "specify_file_type": "Please specify a file type to generate (e.g., gitignore, readme)."
    },
    "success": {
      "gitignore": "✔ Success! .gitignore file generated.",
      "readme": "✔ Success! README.md template generated."
    }
  },
  "init": {
    "command_description": "Starts an interactive wizard to set up a new project.",
    "welcome": "Welcome to StackCode! Let's set up your new project.",
    "setup_start": "🚀 Starting project setup...",
    "prompt": {
      "project_name": "What is the name of your project?",
      "project_name_error": "Project name cannot be empty.",
      "description": "Provide a short description of the project:",
      "author_name": "What is the author's name?",
      "stack": "Which stack would you like to use?",
      "features": "Which additional features do you want to include?",
      "overwrite": "Directory '{projectName}' already exists. Overwrite?",
      "commit_validation": "Enable mandatory conventional commit validation? (Recommended)"
    },
    "step": {
      "scaffold": "-> Creating project structure...",
      "readme": "-> Generating README.md...",
      "gitignore": "-> Generating .gitignore...",
      "husky": "-> Configuring Husky...",
      "git": "-> Initializing Git repository...",
      "deps": "-> Installing dependencies (this may take a moment)..."
    },
    "success": {
      "ready": "✅ Success! Your project is ready.",
      "next_steps": "Next steps:"
    }
  },
  "git": {
    "command_description": "Provides a suite of commands to assist with the GitFlow workflow.",
    "error_specify_subcommand": "Please specify a git subcommand (e.g., start-feature).",
    "start_feature": {
      "description": "Starts a new feature branch from the current branch.",
      "start": "🚀 Starting new feature: {branchName}",
      "success": "✅ Success! Switched to new branch '{branchName}'.",
      "error": "✖ Error: Could not create new branch. Please check your Git status."
    },
    "finish_feature": {
      "description": "Pushes the current feature branch and opens the New Pull Request page in the browser.",
      "start": "🚀 Finalizing feature...",
      "error_not_feature_branch": "✖ This command can only be run on a 'feature/' branch.",
      "current_branch": "You are currently on branch: '{branchName}'.",
      "pushing": "-> Pushing branch '{branchName}' to remote...",
      "opening_browser": "-> Opening your browser to create a Pull Request...",
      "error_parsing_url": "Could not parse GitHub repository path from remote URL.",
      "success": "✅ Success! Your browser is open and ready.",
      "follow_up": "Please review your changes and create the Pull Request on GitHub."
    }
  },
  "config": {
    "command_description": "Manage StackCode global configuration.",
    "prompt": {
        "main": "What do you want to configure?",
        "select_lang": "Select your preferred language (global setting):",
        "toggle_validation": "Enable mandatory conventional commit validation for this project?"
    },
    "success": {
        "set": "✔ Success! Configuration '{key}' set to '{value}'.",
        "set_validation": "✔ Success! Commit validation for this project is now {status}."
    },
    "status": {
        "enabled": "ENABLED",
        "disabled": "DISABLED"
    },
    "error": {
        "not_in_project": "✖ This command must be run from the root of a project initialized with StackCode.",
        "specify_subcommand": "Please specify a config subcommand."
    }
  },
  "common": {
    "operation_cancelled": "Operation cancelled.",
    "error_generic": "✖ An error occurred."
  },
  "release": {
    "command_description": "Helps with versioning and releasing the project.",
    "start": "🚀 Starting release process...",
    "error_structure": "✖ Could not determine project structure. Are you in the root of a monorepo with a `packages` directory?",
    "detected_strategy": "ℹ️ Detected versioning strategy: {strategy}",
    "prompt_continue": "Do you want to continue?",
    "prompt_confirm_release": "Current version is {currentVersion}. Recommended next version is {newVersion}. Confirm release?",
    "error_calculating_version": "✖ Error calculating next version.",
    "step_updating_versions": "-> Updating version in all package.json files...",
    "step_generating_changelog": "-> Generating CHANGELOG.md...",
    "success_ready_to_commit": "✅ Success! Version updated and CHANGELOG.md generated.",
    "next_steps_commit": "Next steps: Review the changes, then run 'git commit' and 'git tag'.",
    "independent_mode_start": "🚀 Starting analysis for independent mode...",
    "independent_mode_no_changes": "✅ No changed packages detected. Everything is up to date!",
    "independent_mode_no_bumps": "ℹ️ Changes detected, but none require a new version (e.g., only chores or refactors).",
    "independent_prompt_confirm": "Confirm the release of the packages listed above?",
    "independent_success": "✅ Independent release completed successfully!",
    "next_steps_push": "Next steps: Run 'git push --follow-tags' to publish."
  }
}