"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initCommand = void 0;
const inquirer_1 = __importDefault(require("inquirer"));
const chalk_1 = __importDefault(require("chalk"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const core_1 = require("@stackcode/core");
exports.initCommand = {
    command: 'init',
    describe: 'Starts an interactive wizard to set up a new project.',
    builder: {},
    handler: async () => {
        console.log(chalk_1.default.cyan.bold("Welcome to StackCode! Let's set up your new project."));
        console.log(chalk_1.default.gray('----------------------------------------------------'));
        const answers = await inquirer_1.default.prompt([
            {
                type: 'input',
                name: 'projectName',
                message: "What is the name of your project?",
                validate: (input) => input ? true : 'Project name cannot be empty.',
            },
            {
                type: 'input',
                name: 'description',
                message: 'Provide a short description of the project:',
                default: 'A new project generated by StackCode.',
            },
            {
                type: 'input',
                name: 'authorName',
                message: 'What is the author\'s name?',
            },
            {
                type: 'list',
                name: 'stack',
                message: 'Which stack would you like to use?',
                choices: [{ name: 'Node.js + TypeScript', value: 'node-ts' }],
            },
            {
                type: 'checkbox',
                name: 'features',
                message: 'Which additional features do you want to include?',
                choices: [
                    { name: 'Docker support', value: 'docker', checked: true },
                    { name: 'Husky for commit linting', value: 'husky', checked: true },
                ],
            },
        ]);
        const projectPath = path_1.default.join(process.cwd(), answers.projectName);
        if (fs_1.default.existsSync(projectPath)) {
            const { overwrite } = await inquirer_1.default.prompt([{
                    type: 'confirm',
                    name: 'overwrite',
                    message: chalk_1.default.yellow(`Directory '${answers.projectName}' already exists. Overwrite?`),
                    default: false
                }]);
            if (!overwrite) {
                console.log(chalk_1.default.red('Operation cancelled.'));
                return;
            }
        }
        console.log(chalk_1.default.gray('----------------------------------------------------'));
        console.log(chalk_1.default.green('ðŸš€ Starting project setup...'));
        const replacements = {
            projectName: answers.projectName,
            description: answers.description,
            authorName: answers.authorName,
        };
        console.log(chalk_1.default.blue('   -> Creating project structure...'));
        (0, core_1.scaffoldProject)({
            projectPath,
            stack: answers.stack,
            features: answers.features,
            replacements,
        });
        console.log(chalk_1.default.blue('   -> Generating README.md...'));
        fs_1.default.writeFileSync(path_1.default.join(projectPath, 'README.md'), (0, core_1.generateReadmeContent)(replacements));
        console.log(chalk_1.default.blue('   -> Generating .gitignore...'));
        fs_1.default.writeFileSync(path_1.default.join(projectPath, '.gitignore'), (0, core_1.generateGitignoreContent)('node'));
        if (answers.features.includes('husky')) {
            console.log(chalk_1.default.blue('   -> Configuring Husky...'));
            (0, core_1.setupHusky)(projectPath);
        }
        console.log(chalk_1.default.blue('   -> Initializing Git repository...'));
        await (0, core_1.runCommand)('git', ['init'], { cwd: projectPath });
        console.log(chalk_1.default.blue('   -> Installing dependencies (this may take a moment)...'));
        await (0, core_1.runCommand)('npm', ['install'], { cwd: projectPath });
        console.log(chalk_1.default.gray('----------------------------------------------------'));
        console.log(chalk_1.default.green.bold('âœ… Success! Your project is ready.'));
        console.log(chalk_1.default.cyan('\nNext steps:'));
        console.log(`   1. cd ${answers.projectName}`);
        console.log('   2. Open the project in your favorite editor.');
        console.log('   3. Start coding! ðŸŽ‰');
    },
};
