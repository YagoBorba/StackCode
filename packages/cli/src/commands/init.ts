import type { CommandModule } from "yargs";
import inquirer from "inquirer";
import chalk from "chalk";
import fs from "fs/promises";
import path from "path";
import {
  scaffoldProject,
  setupHusky,
  generateReadmeContent,
  generateGitignoreContent,
  runCommand,
  type ProjectOptions,
} from "@stackcode/core";
import { t } from "@stackcode/i18n";

export const getInitCommand = (): CommandModule => ({
  command: "init",
  describe: t("init.command_description"),
  builder: {},
  handler: async () => {
    console.log(chalk.cyan.bold(t("init.welcome")));
    console.log(
      chalk.gray("----------------------------------------------------"),
    );

    const answers = await inquirer.prompt([
      {
        type: "input",
        name: "projectName",
        message: t("init.prompt.project_name"),
        validate: (input) => !!input || t("init.prompt.project_name_error"),
      },
      {
        type: "input",
        name: "description",
        message: t("init.prompt.description"),
        default: "A new project generated by StackCode.",
      },
      {
        type: "input",
        name: "authorName",
        message: t("init.prompt.author_name"),
      },
      {
        type: "list",
        name: "stack",
        message: t("init.prompt.stack"),
        choices: [{ name: "Node.js + TypeScript", value: "node-ts" }],
      },
      {
        type: "checkbox",
        name: "features",
        message: t("init.prompt.features"),
        choices: [
          { name: "Docker support", value: "docker", checked: true },
          { name: "Husky for commit linting", value: "husky", checked: true },
        ],
      },
      {
        type: "confirm",
        name: "commitValidation",
        message: t("init.prompt.commit_validation"),
        default: true,
        when: (answers) => answers.features.includes("husky"),
      },
    ]);

    const projectPath = path.join(process.cwd(), answers.projectName);

    try {
      await fs.access(projectPath);
      const { overwrite } = await inquirer.prompt([
        {
          type: "confirm",
          name: "overwrite",
          message: chalk.yellow(
            t("init.prompt.overwrite", { projectName: answers.projectName }),
          ),
          default: false,
        },
      ]);
      if (!overwrite) {
        console.log(chalk.red(t("common.operation_cancelled")));
        return;
      }
    } catch {
      // Intentionally ignored
    }

    console.log(
      chalk.gray("----------------------------------------------------"),
    );
    console.log(chalk.green(t("init.setup_start")));

    const replacements = {
      projectName: answers.projectName,
      description: answers.description,
      authorName: answers.authorName,
    };

    const projectOptions: ProjectOptions = {
      projectPath,
      stack: answers.stack,
      features: answers.features,
      replacements,
    };

    console.log(chalk.blue(`  ${t("init.step.scaffold")}`));
    await scaffoldProject(projectOptions);

    if (
      answers.features.includes("husky") &&
      answers.commitValidation !== undefined
    ) {
      const config = {
        stack: answers.stack,
        features: { commitValidation: answers.commitValidation },
      };
      await fs.writeFile(
        path.join(projectPath, ".stackcoderc.json"),
        JSON.stringify(config, null, 2),
      );
    }

    console.log(chalk.blue(`  ${t("init.step.readme")}`));
    const readmeContent = await generateReadmeContent();
    await fs.writeFile(path.join(projectPath, "README.md"), readmeContent);

    console.log(chalk.blue(`  ${t("init.step.gitignore")}`));
    const gitignoreContent = await generateGitignoreContent([answers.stack]);
    await fs.writeFile(path.join(projectPath, ".gitignore"), gitignoreContent);

    if (answers.features.includes("husky")) {
      console.log(chalk.blue(`  ${t("init.step.husky")}`));
      await setupHusky(projectPath);
    }

    console.log(chalk.blue(`  ${t("init.step.git")}`));
    await runCommand("git", ["init"], { cwd: projectPath });

    console.log(chalk.blue(`  ${t("init.step.deps")}`));
    await runCommand("npm", ["install"], { cwd: projectPath });

    console.log(
      chalk.gray("----------------------------------------------------"),
    );
    console.log(chalk.green.bold(t("init.success.ready")));
    console.log(chalk.cyan(`\n${t("init.success.next_steps")}`));
    console.log(`  1. cd ${answers.projectName}`);
    console.log("  2. Open the project in your favorite editor.");
    console.log("  3. Start coding! ðŸŽ‰");
  },
});
